
*** Squash commits
    #+begin_src sh
    git rebase -i HEAD~n
    #(Replace n appropriately). 
    #Then, change pick to squash for the commits to be squashed.
    #From Howard Abrams' [[http://howardism.org/Technical/Git/squashing-commits.html][post]].
    #If there are only 2 commits to be squashed, it is much simpler to just do a reset.
    git reset --soft HEAD^^
    #The above command ignores the logs for those commits. To include the logs :
    git reset --soft HEAD~3 && git commit --edit -m"$(git log --format=%B --reverse HEAD..HEAD@{1})"
    #Replace 3 appropriately
    #+end_src

*** Alias for git pull --rebase 
    #+begin_src sh
    git config --global alias.pull 'pull --rebase'
    #+end_src

*** Show the top contributers to a package
    #+begin_src sh
    git shortlog -sne
    #+end_src

*** Look at the type and contents of a blob or commit
    #+begin_src sh
    git cat-file -t <Blob or Commit  hash ID> 
    # This fetches the type of the object
    git cat-file <type>(blob, commit etc) <>
    # This shows the contents of the blob,tree or commit.
    #+end_src
    
*** Fetch commit IDs for blobs/trees from a branch
    #+begin_src sh
    git ls-tree <branch-name> (for eg: git ls-tree HEAD)
    #+end_src

** Ignore local changes in tracked files
   There might be a situation where you want to change a file locally but do not want to push it to
   the remote repository and do not want the file showing up when doing git status. 
   This can be done with git update-index as shown below(taking .gitignore as the example file)
   #+begin_src sh
   git update-index --assume-unchanged .gitignore
   # To undo this
   git update-index --no-assume-unchanged .gitignore
   #+end_src
   (There are some limitations to this. Doing a stash and stash pop seems to restore the remote
   version of the file).
